# profile to pack this example into a container, to use it execute activate the maven container profile, -Pcontainer
%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=${USER}
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=1.0.0
%container.quarkus.container-image.name=kogito-bpmn-pgsql-ha-bpmn-workflow

quarkus.application.name=kogito-bpmn-pgsql-ha-bpmn-workflow
quarkus.http.cors=true
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.http.test-port=0
quarkus.native.native-image-xmx=8g

# Swagger-ui (only dev mode)
quarkus.swagger-ui.always-include=true


kogito.persistence.proto.marshaller=false
kogito.persistence.type=jdbc

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres
quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://localhost:5432/postgres}
quarkus.datasource.reactive.url=${QUARKUS_DATASOURCE_REACTIVE_URL:postgresql://localhost:5432/postgres}

kogito.jobs-service.schedulerChunkInMinutes=5
kogito.jobs-service.loadJobIntervalInMinutes=1
kogito.jobs-service.loadJobFromCurrentTimeIntervalInMinutes=11
kogito.jobs-service.loadJobRetries=3

# Data-Index UI
quarkus.kogito.data-index.graphql.ui.always-include=true

# Kogito-service (only dev mode)
kogito.service.url=http://localhost:8080

#Job-service (only dev mode)
kogito.jobs-service.url=http://localhost:8080
kogito.dataindex.http.url=http://localhost:8080
kogito.dataindex.ws.url=ws://localhost:8080

%dev.jbpm.devui.users.jdoe.groups=admin,HR,IT

# Kogito Datasource (only dev mode)
%dev.quarkus.datasource.db-kind=postgresql
%dev.quarkus.datasource.username=postgres
%dev.quarkus.datasource.password=postgres
%dev.quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=kogito}

# run create tables scripts
quarkus.flyway.migrate-at-start=true
quarkus.flyway.baseline-on-migrate=true
quarkus.flyway.baseline-version=0.0
quarkus.flyway.locations=classpath:/db/migration,classpath:/db/jobs-service,classpath:/db/data-audit/postgresql
quarkus.flyway.table=FLYWAY_RUNTIME_SERVICE
quarkus.flyway.out-of-order=true

# Disabling OIDC
quarkus.oidc.enabled=false

# Logs
# quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{20.}] (%t) %s%e%n
quarkus.logging-manager.openapi.included=true

quarkus.log.category."org.kie.kogito".level=INFO
quarkus.log.category."org.kie.kogito.jobs".level=DEBUG
quarkus.log.category."org.jbpm".level=DEBUG
quarkus.log.category."org.jbpm.flow.serialization".level=INFO
quarkus.log.category."org.jbpm.workflow.instance.impl.NodeInstanceFactoryRegistry".level=INFO
quarkus.log.category."org.kie.kogito".level=DEBUG
quarkus.log.category."org.kie.kogito.event".level=INFO
quarkus.log.category."org.kie.kogito.app.audit".level=INFO
quarkus.log.category."org.kie.kogito.index".level=INFO

# OpenTelemetry Traces (Jaeger)
%dev.quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317
%dev.quarkus.otel.exporter.otlp.traces.headers=Authorization=Bearer my_secret

# OpenTelemetry Metrics (Jaeger)
%dev.quarkus.micrometer.export.otlp.enabled=true
%dev.quarkus.micrometer.registry-enabled-default=true
%dev.quarkus.micrometer.export.otlp.get-enabled=true
%dev.quarkus.micrometer.export.otlp.url=http://localhost:4318/v1/metrics

#kogito.jobs-service.schedulerChunkInMinutes=1